База Знаний
	1. Конструкторы детей обязательно должны вызывать конструкторы предков, но необязательно с теми же параметрами.
	
	2. Интерфейс = Абстрактный клас
		2.1. Не может иметь реализацию
		2.2. фактически интерфейс это для полимфизма
		
	3. Исключения....
	
	4. Работа со строчками ...
		4.1. ps.equals 
		4.2. StringBuilder
		4.3. String cl = "(" + result.stream().map(so -> String.valueOf(so.getStudentOrderId())).collect(Collectors.joining(",")) + ")";
		
	5. Коллекции
		5.1. List 
			5.1.1. List<StudentOrder> result = new LinkedList<>(); result.add(so);
			5.1.2. List<String> str1 = Files.readAllLines(Paths.get(url1.toURI()));
		5.2. Set
		5.3. Map
			5.3.1. Map<Long, StudentOrder> maps = new HashMap<>();
			5.3.2.  if (!maps.containsKey(soId)) {
					StudentOrder so = getFullStudentOrder(rs);

					result.add(so);
					maps.put(soId, so);
					}
					StudentOrder so = maps.get(soId);
			5.3.3. Map<Long, StudentOrder> maps = result.stream().collect(Collectors.toMap(so -> so.getStudentOrderId(), so -> so));
		5.4. Queue
		
	6. Работа с БД
		6.1. return DriverManager.getConnection("jdbc:postgresql://localhost/city_register", "postgres", "postgres");
		
		6.2. dataSource = (DataSource) ctx.lookup("java:comp/env/jdbc/cityRegister");
			6.2.1. META-INF\context.xml
			6.2.2. WEB-INF\web.xml
			P.S. Реализованно ввидео интерфейса ConnectionBuilder в проекте city-Register	
		6.3. try(Connection con = getConnection();
                 PreparedStatement stmt = con.prepareStatement(sql))
			!!!Обязательно в try чтоб автоматически удалялось.
			
			6.3.1.  PreparedStatement stmt = con.prepareStatement(INSERT_ORDER, new String[]{"student_order_id"}))
					ResultSet gkRs = stmt.getGeneratedKeys();
					if (gkRs.next()) {
						result = gkRs.getLong(1);
					}
					gkRs.close();
		6.4. con.setAutoCommit(false);  con.commit(); con.rollback();
	7. Reflection (class Server проекта IdeaProjects\ext-systems\network-tcp)
		7.1 Метод loadHandlers 
			Class<Greetable> cl = (Class<Greetable>) Class.forName(className);
            Greetable handler = cl.getConstructor().newInstance();
		Аннотация 
			К классу
			К методу
			к вход параметру
	8. Логирование В72
		8.1. Инфа
				log4j    |
				jdk       } slf4j
				logback  |
				simple   |
				
				trace если жопа, слишком подробно
				debug   сщщбщения + парметры
				info     default
				warning почти ошибки
				error
		8.2. private static final Logger logger = LoggerFactory.getLogger(CheckPersonService.class);	
			 logger.info("SERVICE is created {} {}", dt1, dt2);
	9. Servlet
		9.1.  Жизненный цикл
			1. Иницилизация
				только 1 жкземпляр
			2. Работа
			3. Уничтожение
		9.2. Либо аннотации @WebServlet(name = "CheckPersonServlet", urlPatterns = {"/checkPerson"}) ИЛИ  прописать servlet-mapping в web.xml
	10. SOLID - https://habr.com/ru/company/vk/blog/412699/
	11. Rest В101
		11.1. Входные параметры 
			11.1.1. @Path("/{id}"); @PathParam("id"); @QueryParam("name");
			11.1.2. @Consumes(MediaType.APPLICATION_JSON) В105
		11.2. Выходные параметры @Produces(MediaType.APPLICATION_JSON)
		11.3. Отправить запрос 
		    Client client = ClientBuilder.newClient();
            CityRegisterResponse response = client.target(
                     Config.getProperty(Config.CR_URL))
                    .request(MediaType.APPLICATION_JSON)
                    .post(Entity.entity(request, MediaType.APPLICATION_JSON))
                    .readEntity(CityRegisterResponse.class);
	12. ORM
			resources\META-INF\persistence.xml
			EntityManagerFactory emf = Persistence.createEntityManagerFactory("persistence");
			EntityManager em = emf.createEntityManager();
			em.getTransaction().begin();
			em.persist(p);
			em.getTransaction().commit();
			em.close();
			
			12.1 Типы отношений
				12.1.1.  Соединение, 
				12.1.2. Наследование
					Три типа добавление новый полей при наследование
						SingleTable 
							@Inheritance(strategy = InheritanceType.SINGLE_TABLE)
							@DiscriminatorColumn(name = "sex", discriminatorType = DiscriminatorType.INTEGER) как различать классы в таблице
						Каждого "ребенка" в свою доп таблицу
						Каждого "ребенка" в свою таблицу
			12.2. На что ставится аннотации			
				На класс
					@Table(name = "ro_passport")
					@Entity
				На поля			
					@Id это идентфикатор
					@GeneratedValue(strategy = GenerationType.IDENTITY) генерация на БД
					@Column(name = "passport_id")
					@ManyToOne(cascade = {CascadeType.REFRESH}, fetch = FetchType.LAZY) --CascadeType что сделать с связанные таблицами, fetch вытаскивать ли связанные
							@ManyToOne - Eager @OneToMany - LAZY
							mappedBy = "person" здесь указывается обект ОРМ
					@JoinColumn(name = "person_id") по какому полу джойнится.Здесь указывать поле БД
			12.3. HQL
				Обращение не таблицам БД а к объектам ORM.
				Но существуют LEFT JOIN FETCH
				

	13. Немного об архитектуре Enterprise-приложения. В113 спецификация JIE
		WEB  		 (принять и проверить) (JSF, ZK) Jersey
		Business 	 (организовать набор обьектов и транзакционасть, общаться в Persistence) (Spring FrameWork)
		Persistence  (общаться с БД) (Hybirnet)
		Выпуск 113.
	14. Потоки 
		extends Thread в SimpleServer В90
	15. Spring В121 - 122
		Спринг - создание мира обектов. И внедрение кода в нужные места (аспекты)
		121 - xml  ApplicationContext context = new ClassPathXmlApplicationContext(new String[]{"springContext.xml"}
        );
		122 - аннотации
			@Service - для API
			@Component - для описанией полей?!
			@Autowired - на поля или на сеттер или на конструктор, связь одного класа с другим. Даже можно убрать сеттеры
			@Configuration -  специальный  класс, которому мы просим сотворить бин особым образом 
			@Qualifier - указать на какой именно класс связаться
			@Scope - сколько объектов создавать
		123 - Подключение к бд
			Подключаем спринг орм
			для ReadOnly определяем правила подклчения + LocalCOntainer + properties
			@PersistentContext
		124
			flush
			Транзакции
		125
			Spring Data - как можно написать dao
			https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods
			Три метода создание своих методов:
				1. Имя метода состовляется определнным образом
				2. Именновонный запрос с использование @Param..имя именнованного запроса совпадает с именем метода
				3. Аннотация Query
		127 рассказ про web.xml
				
		129
			Подключаем тест к спрингу
			@RunWith(SpringRunner.class)
			@ContextConfiguration(locations = {"classpath:springContext.xml"})
	133 WEB программирование
	135 JSP нарисовать страничку с данными
	137 Научились взаимодействовать сервлет со спрингом, а именно получать контекст спринга, и через контекст
		общатьсяс компонентами внутри
		ServletContext ctx = getServletContext();
        WebApplicationContext webCtx = WebApplicationContextUtils.getWebApplicationContext(ctx);

        UniversityService service = webCtx.getBean(UniversityService.class);
        List<University> list = service.findUniversities();
        list.forEach(u -> System.out.println())
		
	140 Как решать вопрос с LazyInitializationException
			1. Eager
			2. Hibernate.initialize(fc.getUniversity());
			3. Нативный запрос
	
		
	
		
	
	
Синтаксис и полезный конструкции
	1. if (person instanceof Adult)
		Adult t = (Adult) person
		
	2.  ResultSet rs = stmt.executeQuery();
        if(rs.next()){
			response.setRegistered(true);
            response.setTemporal(rs.getBoolean("temporal"));
        }
	3. stmt.setTimestamp(2, java.sql.Timestamp.valueOf(LocalDateTime.now()));
	4. list.forEach(p1 -> System.out.println(p1));
		
		List<Person> persons = personDao.findPersons();
		for(Person person : persons) {
	
	5.        List<StudentDocument> docs = student.get(0).getDocuments();
        List<StudentResponse> result = docs.stream().map(d -> getResponse(d)).collect(Collectors.toList());